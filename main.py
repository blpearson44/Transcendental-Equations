# Written by Ben Pearson
# V0.0.3

"""
This module implements the modules funcitonal_iteration and newton.
"""

# Modules
import constants as c
import functions as f
import newton
import functional_iteration


def print_arrs(f_arr, n_arr):
    """Print the arrays generated by functional iteration and newton's method and show the delta"""
    print("\tFuncitonal Iteration\tNewton's Method\tDifference")
    for i in range(c.N):
        if c.N > 100:
            if i % 20 == 0:
                print(
                    str(i)
                    + "\tx =\t"
                    + str(f_arr[i])
                    + ",\tx =\t"
                    + str(n_arr[i])
                    + ",\tdelta =\t"
                    + str(f_arr[i] - n_arr[i])
                )
        else:
            print(
                "x =\t"
                + str(f_arr[i])
                + ",\tx =\t"
                + str(n_arr[i])
                + ",\tdelta =\t"
                + str(f_arr[i] - n_arr[i])
            )


x = 2
print_arrs(functional_iteration.itor(f.f_test, x), newton.itor(f.n_test, f.d_n_test, x))
x = 1
print_arrs(functional_iteration.itor(f.f_even, x), newton.itor(f.n_even, f.d_n_even, x))
x = 3.5
print_arrs(functional_iteration.itor(f.f_even, x), newton.itor(f.n_even, f.d_n_even, x))
x = 4
print_arrs(functional_iteration.itor(f.f_odd, x), newton.itor(f.n_odd, f.d_n_odd, x))
